buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'org.spongepowered.mixin'

group = 'io.github.lgatodu47'
version = '0.1'

java {
    archivesBaseName = 'speculative'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'


            mods {
                speculative {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                speculative {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'speculative', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                speculative {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "speculative.refmap.json"

    config "speculative.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}

repositories {
    maven {
        url "https://maven.tterrag.com/"
    }

    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.35'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    def registrate = "com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}"
    implementation fg.deobf(registrate)

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Speculative",
                "Specification-Vendor"    : "LGatodu47",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "LGatodu47",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'io.github.lgatodu47.registrate'
}

reobf {
    shadowJar {}
}

build.dependsOn shadowJar
build.dependsOn reobfShadowJar

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
